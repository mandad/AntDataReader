<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AntDataReader</name>
    </assembly>
    <members>
        <member name="T:AntDataReader.CubeBuilder">
            <summary>
            Builds a 3D WPF rectangle
            </summary>
        </member>
        <member name="M:AntDataReader.CubeBuilder.#ctor(System.Windows.Media.Color)">
            <summary>
            Sets the color of the cube
            </summary>
            <param name="color">The color to set</param>
        </member>
        <member name="M:AntDataReader.CubeBuilder.Create(AntDataReader.CubeBuilder.Direction,System.Double)">
            <summary>
            Creates the cube
            </summary>
            <returns>The cube object</returns>
        </member>
        <member name="M:AntDataReader.CubeBuilder.CreateTriangle(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Creates triangles given corner points
            </summary>
            <param name="p0">The first point</param>
            <param name="p1">The second point</param>
            <param name="p2">The third point</param>
            <returns>The triangle as a model</returns>
        </member>
        <member name="P:AntDataReader.CubeBuilder.CubeColor">
            <summary>
            The color of the rectangle
            </summary>
        </member>
        <member name="T:AntDataReader.CubeBuilder.Direction">
            <summary>
            Represents a direction to draw the rod
            </summary>
        </member>
        <member name="T:AntDataReader.VectorHelper">
            <summary>
            Contains vector manipulation functions
            </summary>
        </member>
        <member name="M:AntDataReader.VectorHelper.CalcNormal(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Calculates the normal vector to a point
            </summary>
            <param name="p0">The first point</param>
            <param name="p1">The second point</param>
            <param name="p2">The third point</param>
            <returns>The normal vector</returns>
        </member>
        <member name="M:AntDataReader.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:AntDataReader.ANTCommands">
            <summary>
            Stores commands for the ANT protocol
            </summary>
        </member>
        <member name="M:AntDataReader.ANTCommands.BasicData(System.Int32)">
            <summary>
            Performs initial setup of the message packet
            </summary>
            <param name="dataBytes">Number of data bytes in the message</param>
            <returns>The full packet prefilled with the sync and data length bytes</returns>
        </member>
        <member name="M:AntDataReader.ANTCommands.GetChecksum(System.Byte[])">
            <summary>
            Gets the checksum byte for a message
            </summary>
            <param name="dataCheck">The full message without the checksum</param>
            <returns>The checksum byte</returns>
        </member>
        <member name="M:AntDataReader.ANTCommands.AssignChannel">
            <summary>
            Assigns the ANT Module to the default channel, bidirectional recieve mode
            </summary>
            <returns>The message content necessary to assign the channel</returns>
        </member>
        <member name="M:AntDataReader.ANTCommands.SetChannelId">
            <summary>
            Sets the channel ID for a slave device, match any transmission, receive any
            </summary>
            <returns>The message packet</returns>
        </member>
        <member name="M:AntDataReader.ANTCommands.Reset">
            <summary>
            Performs a soft reset of the ANT system
            </summary>
            <returns>The message packet</returns>
        </member>
        <member name="M:AntDataReader.ANTCommands.OpenChannel">
            <summary>
            Opens the ANT channel after it has been initialized
            </summary>
            <returns>The message packet</returns>
        </member>
        <member name="M:AntDataReader.ANTCommands.CloseChannel">
            <summary>
            Closes an open ANT channel
            </summary>
            <returns>The message packet</returns>
        </member>
        <member name="M:AntDataReader.ANTCommands.OpenRxScanMode">
            <summary>
            Opens scan mode after initialization of the channel
            </summary>
            <returns>The message packet</returns>
        </member>
        <member name="M:AntDataReader.ANTCommands.SetChannelPeriod">
            <summary>
            Sets the channel message period
            </summary>
            <returns>The message packet</returns>
        </member>
        <member name="M:AntDataReader.ANTCommands.RxExtMessageEnable">
            <summary>
            Gets the message to enable extended messages
            </summary>
            <returns>The message packet</returns>
        </member>
        <member name="T:AntDataReader.frmTeslaGui">
            <summary>
            The GUI form that displays received data
            </summary>
        </member>
        <member name="T:AntDataReader.ANTDataInterpreter">
            <summary>
            The interface defining a class that can recieve callbacks from the AntCommunication and BufferedReader classes
            </summary>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.#ctor(AntDataReader.frmChoose)">
            <summary>
            Initialized the GUI
            Attempts to open COM 9 by default
            </summary>
            <param name="frmChoose">The parent chooser form</param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.simTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            EVENT: Creates a simulation packet for testing
            </summary>
            <remarks>Called every 100ms</remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.flashTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            EVENT: Resets the flash "LED" color back to normal
            </summary>
            <remarks>Called 50ms after being set green</remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.UncheckAllComs">
            <summary>
            Unchecks all the COM port selection menu items before selecting a new one
            </summary>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.serialPort_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            EVENT: Processes data when it is received by the serial port
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.startToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            EVENT: Opens the serial port and ANT protocol when the "Start" menu item is clicked 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.HaveMessages">
            <summary>
            Called from BufferedReader when a full message has arrived
            </summary>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.ProcessData(System.Byte[])">
            <summary>
            Puts the data into a format for display
            </summary>
            <param name="readData">The full packet received from ANT</param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.GetADCVoltage(System.Int32)">
            <summary>
            Converts a 12bit number from the ADC to the actual voltage read
            </summary>
            <param name="ADCVal">The raw ADC value</param>
            <returns></returns>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.WriteInfo(System.Object[],AntDataReader.DataDecoder.SensorType,System.Int32)">
            <summary>
            Writes data to a log file and the web
            </summary>
            <param name="toPass">The data from the sensor</param>
            <param name="sensorType">The type of sensor from which the data was taken</param>
            <param name="boardId">The ID of the board</param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.RemoteDisplayUpdate(System.Object[],AntDataReader.DataDecoder.SensorType,System.Int32)">
            <summary>
            Invokes the GUI update to make it thread safe
            </summary>
            <param name="passIn">The data needed to update the GUI for that sensor</param>
            <param name="sensor">Sensor type of data to update</param>
            <param name="sensorBoard">The ID of the sensor board transmitting the data</param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.UpdateGUIFunction(AntDataReader.DataDecoder.SensorType,System.Int32,System.Object[])">
            <summary>
            Updates the GUI from another thread to avoid conflicts
            </summary>
            <param name="senseType">The type of the sensor data to update</param>
            <param name="boardID">The board from which the data originated</param>
            <param name="parameters">The data values required by that sensor</param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.OnChannelClosed">
            <summary>
            Called remotely when the ANT channel is closed
            </summary>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.OnChannelOpened">
            <summary>
            Called remotely when the ANT channel is opened
            </summary>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.DisplayMessage(System.String)">
            <summary>
            Called remotely to display a message
            </summary>
            <param name="message">The me</param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.FlashLED">
            <summary>
            Starts the sequence to flash the green square ("LED")
            </summary>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.debugModeToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Launches the Debug mode form
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.frmTeslaGui_FormClosed(System.Object,System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            Closes the hidden chooser form when this one is closed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.frmTeslaGui_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Close the ant channel and serial port when the form closes
            Stop logging data if necessary
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.dlgSaveFile_FileOk(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles saving the file for the log
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.thrdWebSubmit_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Runs the web data submission in a background thread
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:AntDataReader.frmTeslaGui.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AntDataReader.frmTeslaGui.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:AntDataReader.BufferedReader">
            <summary>
            Manages the read buffer for ANT serial data
            Calls a function when a full data packet is received
            </summary>
        </member>
        <member name="M:AntDataReader.BufferedReader.#ctor(AntDataReader.ANTDataInterpreter)">
            <summary>
            Initializes the buffer
            </summary>
            <param name="parentForm">The form to report information back to</param>
        </member>
        <member name="M:AntDataReader.BufferedReader.AddNewReceived(System.Byte[])">
            <summary>
            Adds new serial port data to the buffer
            </summary>
            <param name="data">The raw serial data array</param>
        </member>
        <member name="M:AntDataReader.BufferedReader.CheckForMessage">
            <summary>
            Checkes if there is a full ANT Data message to read in the buffer
            </summary>
        </member>
        <member name="P:AntDataReader.BufferedReader.Messages">
            <summary>
            The messages currently stored, destructive on read
            </summary>
        </member>
        <member name="T:AntDataReader.frmDisplay">
            <summary>
            The debug display form
            </summary>
        </member>
        <member name="M:AntDataReader.frmDisplay.#ctor(AntDataReader.frmChoose)">
            <summary>
            Initialized the debug form
            </summary>
            <param name="parent">The parent chooser form</param>
        </member>
        <member name="M:AntDataReader.frmDisplay.serialPort_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            EVENT: Called when the serial port recieves data
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmDisplay.UpdateLabelFunction(System.String)">
            <summary>
            Updates the channel status label
            </summary>
            <param name="newText">Text to set as label text</param>
        </member>
        <member name="M:AntDataReader.frmDisplay.RemoteDisplayUpdate(System.String)">
            <summary>
            Called to update the display in a threadsafe manner
            </summary>
            <param name="addText">Text to add to the main display</param>
        </member>
        <member name="M:AntDataReader.frmDisplay.UpdateDisplayTextFunction(System.String)">
            <summary>
            Updates the main display text by adding new text to the bottom
            </summary>
            <param name="toAdd">The text to add</param>
        </member>
        <member name="M:AntDataReader.frmDisplay.btnOpenCom_Click(System.Object,System.EventArgs)">
            <summary>
            EVENT: Called when the "Open COM" button is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmDisplay.btnTest_Click(System.Object,System.EventArgs)">
            <summary>
            EVENT: Called when the "Open Channel" button is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmDisplay.cmbPort_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            EVENT: Called when the serial port dropdown selection changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmDisplay.btnClearDisplay_Click(System.Object,System.EventArgs)">
            <summary>
            EVENT: Called when "Clear Display" is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmDisplay.frmDisplay_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            EVENT: Closes the ANT channel as the form closes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmDisplay.frmDisplay_FormClosed(System.Object,System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            EVENT: Closes the chooser form after the form has closed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmDisplay.btnScanMode_Click(System.Object,System.EventArgs)">
            <summary>
            EVENT: Called when "Open Rx Scan Mode" is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmDisplay.cbAscii_CheckStateChanged(System.Object,System.EventArgs)">
            <summary>
            EVENT: Called when the "Ascii Mode" checkbox changes state
            Sets the decoding display mode
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmDisplay.btnReset_Click(System.Object,System.EventArgs)">
            <summary>
            EVENT: Called when the reset button is clicked, resets ANT
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmDisplay.cmbBaudRate_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            Called when the baud rate dropdown is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AntDataReader.frmDisplay.HaveMessages">
            <summary>
            This function will be called remotely when the buffer has read a full message
            </summary>
        </member>
        <member name="F:AntDataReader.frmDisplay.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AntDataReader.frmDisplay.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AntDataReader.frmDisplay.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:AntDataReader.TempVal">
            <summary>
            Used to correlated ADC voltages to LM94022 temperatures
            </summary>
        </member>
        <member name="M:AntDataReader.TempVal.#ctor">
            <summary>
            Initializes the correlation array
            </summary>
        </member>
        <member name="M:AntDataReader.TempVal.GetTemp(System.Double)">
            <summary>
            Returns a temperature given an ADC voltage
            </summary>
            <param name="voltage">The voltage read by the ADC</param>
            <returns>Temperature in degrees C</returns>
        </member>
        <member name="M:AntDataReader.TempVal.SearchTemp(System.Double,System.Int32)">
            <summary>
            Searches for a temperature near a given voltage
            </summary>
            <param name="searchVal">The voltage to search near</param>
            <param name="direction">Direction to search (+/-1)</param>
            <returns>The nearest voltage that has a corresponding temp</returns>
        </member>
        <member name="M:AntDataReader.TempVal.FillTransferTable">
            <summary>
            Fills the correlation array with factors from the datasheet
            </summary>
        </member>
        <member name="T:AntDataReader.ANTCommunication">
            <summary>
            Handles ANT communication protocol and interaction with the Nordic chip
            </summary>
        </member>
        <member name="M:AntDataReader.ANTCommunication.#ctor(System.IO.Ports.SerialPort@,AntDataReader.ANTDataInterpreter)">
            <summary>
            Initiates the communication class
            </summary>
            <param name="spSet">The serial port used for communication to the USB receiver</param>
            <param name="parentForm">The form using this</param>
        </member>
        <member name="M:AntDataReader.ANTCommunication.GetResponseCodes">
            <summary>
            Fills a dictionary with keys of response message codes and values of their description
            </summary>
            <returns>the filled dictionary</returns>
        </member>
        <member name="M:AntDataReader.ANTCommunication.InitializeAntSyncronous">
            <summary>
            Initialized sychronous ANT communication in receive mode
            Default settings used
            </summary>
        </member>
        <member name="M:AntDataReader.ANTCommunication.OpenChannel">
            <summary>
            Reopens a channel that has been previously initialized
            </summary>
        </member>
        <member name="M:AntDataReader.ANTCommunication.SendCommand(System.Byte[])">
            <summary>
            Wites a command array to the serial port
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:AntDataReader.ANTCommunication.CloseChannel">
            <summary>
            Closes the channel and waits for a response
            </summary>
        </member>
        <member name="M:AntDataReader.ANTCommunication.RxScanMode">
            <summary>
            Opens RX Scan mode without extended packets
            </summary>
        </member>
        <member name="M:AntDataReader.ANTCommunication.ResetANT">
            <summary>
            Sends the reset command, no response required
            </summary>
        </member>
        <member name="M:AntDataReader.ANTCommunication.DecodeResponse(System.Byte,System.Byte)">
            <summary>
            Decodes a Channel Response / Event (0x40)
            </summary>
            <param name="messageId">The message id from the response</param>
            <param name="messageCode">The message code from the response</param>
            <returns>A string containing the message to display</returns>
        </member>
        <member name="M:AntDataReader.ANTCommunication.ChecksumVerify(System.Byte[])">
            <summary>
            Runs through the elements of a data packet and checks its validity against the checksum byte
            </summary>
            <param name="toVerify">The data packet to verify</param>
            <returns>True if the checksum is correct</returns>
        </member>
        <member name="P:AntDataReader.ANTCommunication.ResponseReceived">
            <summary>
            Set to indicate that a serial response has been received
            </summary>
        </member>
        <member name="P:AntDataReader.ANTCommunication.ChannelOpen">
            <summary>
            Indicates if the ANT channel is open
            </summary>
        </member>
        <member name="P:AntDataReader.ANTCommunication.InitState">
            <summary>
            The state of a multistage function with multiple commands
            </summary>
        </member>
        <member name="F:AntDataReader.frmChoose.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AntDataReader.frmChoose.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AntDataReader.frmChoose.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:AntDataReader.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AntDataReader.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AntDataReader.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:AntDataReader.UserControl1">
            <summary>
            Interaction logic for UserControl1.xaml
            </summary>
            <summary>
            UserControl1
            </summary>
        </member>
        <member name="M:AntDataReader.UserControl1.#ctor">
            <summary>
            Initialized the control and renders the inital drawing
            </summary>
        </member>
        <member name="M:AntDataReader.UserControl1.RotateX(System.Double)">
            <summary>
            Rotates the object around the X axis
            </summary>
            <param name="angle">The angle by which to rotate (Degrees)</param>
        </member>
        <member name="M:AntDataReader.UserControl1.RotateY(System.Double)">
            <summary>
            Rotates the object around the Y axis
            </summary>
            <param name="angle">The angle by which to rotate (degrees)</param>
        </member>
        <member name="M:AntDataReader.UserControl1.RotateZ(System.Double)">
            <summary>
            Rotates the object around the Z axis
            </summary>
            <param name="angle">The angle by which to rotate (degrees)</param>
        </member>
        <member name="M:AntDataReader.UserControl1.UpdateDisplay(System.Double,System.Double,System.Double)">
            <summary>
            Updates the positions
            </summary>
            <param name="x">The X direction acceleration</param>
            <param name="y">The Y direction acceleration</param>
            <param name="z">The Z direction acceleration</param>
        </member>
        <member name="M:AntDataReader.UserControl1.Render">
            <summary>
            Performs the initial rendering
            </summary>
        </member>
        <member name="M:AntDataReader.UserControl1.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:AntDataReader.DataDecoder">
            <summary>
            Decodes a data packet from the ANT protocol to extract sensor information
            </summary>
        </member>
        <member name="M:AntDataReader.DataDecoder.#ctor(System.Byte[])">
            <summary>
            Initialized the decoder class, will fill all elements if the format is properly recognised
            </summary>
            <param name="rawData">The raw ANT packet to process</param>
        </member>
        <member name="M:AntDataReader.DataDecoder.ProcessData">
            <summary>
            Sets the data array for the type of sensor
            </summary>
        </member>
        <member name="M:AntDataReader.DataDecoder.GetAnalogNum(System.Byte,System.Byte)">
            <summary>
            Extracts a 12 bit analog value from two bytes, aligned to lower end
            </summary>
            <param name="MSB">The upper byte</param>
            <param name="LSB">The lower byte</param>
            <returns>The concatenated 12 bit number</returns>
        </member>
        <member name="M:AntDataReader.DataDecoder.GetDeviceID(System.Byte,System.Byte)">
            <summary>
            Concatenates the two bytes that make up the device ID
            </summary>
            <param name="MSB">The upper byte</param>
            <param name="LSB">The lower byte (second in data transmission)</param>
            <returns></returns>
        </member>
        <member name="P:AntDataReader.DataDecoder.DeviceID">
            <summary>
            Gives the device ID portion of the extended message
            </summary>
        </member>
        <member name="P:AntDataReader.DataDecoder.IsExtendedMessage">
            <summary>
            Indicates if the message is an extended message
            </summary>
        </member>
        <member name="P:AntDataReader.DataDecoder.ProcessedData">
            <summary>
            The data after it has been decoded
            </summary>
        </member>
        <member name="P:AntDataReader.DataDecoder.Sensor">
            <summary>
            The type of sensor from which the data came
            </summary>
        </member>
        <member name="T:AntDataReader.DataDecoder.SensorType">
            <summary>
            Represents the type of sensor
            </summary>
        </member>
        <member name="T:AntDataReader.DataDecoder.DataType">
            <summary>
            Represents whether the data stored is analog or digital
            </summary>
        </member>
        <member name="T:AntDataReader.DataDecoder.DataItem">
            <summary>
            Stores one piece of data from the sensor
            </summary>
        </member>
    </members>
</doc>
